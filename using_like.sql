-- A large amount of money was stolen today from the main city bank, and as the chief of police it's your duty to find the robber.

-- You store information about your suspects in the table Suspect, which has the structure:

-- id: unique suspect id;
-- name: suspect first name;
-- surname: suspect surname;
-- height: suspect height;
-- weight: suspect weight.
-- You have already gathered some evidence and discovered the following clues:

-- according to the camera records, the robber is not taller than 170cm;
-- the robber left their signature near the crime scene: "B. Gre?n". "B" definitely stands for the first letter of robber's name, and "Gre?n" is their surname. The 4th letter of the surname is smudged by ketchup and is unreadable.
-- To make the list of suspects smaller, you would like to filter out the suspects who can't possibly be guilty according to the information obtained from the clues. For each remaining suspect, you want to save his/her id, name and surname. Please note that the information obtained from the clue should be considered case-insensitive, so for example "bill Green", and "Bill green", and "Bill Green" should all be included in the new table.

-- Given the table Suspect, build the resulting table as follows: the table should have columns id, name and surname and its values should be ordered by the suspects' ids in ascending order.
CREATE PROCEDURE suspectsInvestigation()
BEGIN
	select id, name,surname from Suspect
  where height <= 170 and name like 'b%' and surname like 'Gre_n'
  order by id;
END

-- A large amount of money was stolen today from the main city bank, and as the chief of police it's your duty to find the robber.

-- You store information about your suspects in the table Suspect, which has the structure:

-- id: unique suspect id;
-- name: suspect first name;
-- surname: suspect surname;
-- height: suspect height;
-- weight: suspect weight.
-- You have already gathered some evidence and discovered the following clues:

-- according to the camera records, the robber is taller than 170cm;
-- the robber left their signature near the crime scene: "B. Gre?n". "B" definitely stands for the first letter of robber's name, and "Gre?n" is their surname. The 4th letter of the surname is smudged by ketchup and is unreadable.
-- The clues you've obtained allow you to let some suspects go since they can't possibly be guilty, so now you need to build a list that contains the people who can be freed based on the gathered information. For each of these people, you need to know his/her id, name and surname. Please note that the information obtained from the clue should be considered case-insensitive, so for example "bill Green", "Bill GrEeN", and "Bill Green" should all be included in the new table.

-- Given the table Suspect, build the resulting table as follows: the table should have columns id, name and surname and its values should be ordered by the suspects' ids in ascending order.
CREATE PROCEDURE suspectsInvestigation2()
BEGIN
	select id,name,surname from Suspect
  where height <= 170 or   name  not like 'B%'  or surname not like  'Gre_n'
  order by id;
END

-- You are managing a large website that uses a special algorithm for user identification. In particular, it generates a unique attribute for each person based only on their first and last names and some additional metadata.

-- After analyzing the server logs today you found out that the website security has been breached and the data of some of your users might have been compromised.

-- The users' info is stored in the table users with the following structure:

-- first_name: user's first name;
-- second_name: user's last name;
-- attribute: a unique attribute string of this user.
-- It seems that only the users those attribute was generated by the old version of your special algorithm were affected. Such attributes have the following format (accurate to letter cases): <one or more arbitrary character>%<first name>_<second name>%<zero or more arbitrary characters>. It's your duty now to warn the users that have these attributes about possible risks.

-- Given the users table, compose the resulting table consisting only of the rows that contain affected users' info. The result should be sorted by the attributes in ascending order.
CREATE PROCEDURE securityBreach()
BEGIN
    select first_name, second_name, attribute from users
    where attribute  like binary concat('%_\%',first_name,'\_',second_name,'\%%')
    order by attribute
	;
END

-- Implement the missing code, denoted by ellipses. You may not modify the pre-existing code.
-- Your professor gave the class a bonus task: Write a program that will check the answers for the latest test. The program will be given a table answers with the following columns:

-- id - the unique ID of the question;
-- correct_answer - the correct answer to the question, given as a string;
-- given_answer - the answer given to the question, which can be NULL.
-- Your task is to return the table with a column id and a column checks, where for each answers id the following string should be returned:

-- "no answer" if the given_answer is empty;
-- "correct" if the given_answer is the same as the correct_answer;
-- "incorrect" if the given_answer is not empty and is incorrect.
-- Order the records in the answer table by id.
CREATE PROCEDURE testCheck()
    SELECT id, IF (given_answer is null,'no answer' , if(given_answer = correct_answer, 'correct' ,'incorrect' ) ) AS checks
    FROM answers
    ORDER BY id;

-- You're a math teacher at an elementary school. Today you taught your class basic arithmetic operations ("+", "-", "*", "/") and now you need to give the students some homework. You have a lot of expressions in the format a <operation> b = c, where a, b, and c are some integers and operation is one of the operations given above.

-- Information about these expressions is stored in the table expressions, which has the structure:

-- id: the unique operation id;
-- a: an integer;
-- b: an integer;
-- operation: one of the operations given above ("+", "-", "*", or "/");
-- c: an integer.
-- The homework you're going to give is simple: For each expression, the student needs to determine whether it's correct or not, i.e. whether it's true that the expression to the left of the = sign equals c.

-- Since you have many students and checking all their answers manually is a lot of work, you want to streamline the process by automatically identifying all the expressions that are correct. Given the table expressions, build the resulting table as follows: The table should have the same columns as the initial table does, but it should only contain those rows that represent correct expressions. The rows should be ordered by id.
CREATE PROCEDURE expressionsVerification()
BEGIN
	select * 
  from expressions    
  where (operation = '+' and a + b = c) or 
    (operation = '*' and a * b = c) or 
    (operation = '-' and a - b = c) or 
    (operation = '/' and a / b = c);
END

-- You are managing a small newspaper subscription service. Anyone who uses it can subscribe to a large number of different newspapers for a full year or just a half year.

-- The information about subscriptions is stored in the full_year and half_year tables, which have the following structures:

-- full_year:
-- id: the unique subscription ID;
-- newspaper: the newspaper's name;
-- subscriber: the name of the subscriber.
-- half_year
-- id: the unique subscription ID;
-- newspaper: the newspaper's name;
-- subscriber: the name of the subscriber.
-- Given the full_year and half_year tables, compose the result as follows: The resulting table should have one column subscriber that contains all the distinct names of anyone who is subscribed to a newspaper with the word Daily in its name. The table should be sorted in ascending order by the subscribers' first names.
CREATE PROCEDURE newsSubscribers()
BEGIN
	select distinct subscriber 
  from (
        select  subscriber 
        from full_year
        where newspaper like '%daily%'
        union all                
        select subscriber 
        from half_year
        where newspaper like '%daily%'
                
        ) subquery 
        
  order by subscriber;
END